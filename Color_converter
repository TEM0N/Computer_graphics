<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Color Converter</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f0f0;
            padding: 20px;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
        }

        .color-picker {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

        .palette {
            display: flex;
            justify-content: center;
            margin-bottom: 5px;
        }

        .names {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
        }

        input[type="color"] {
            width: 100px;
            height: 100px;
            border: none;
            cursor: pointer;
        }

        .color-input {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        input[type="text"] {
            width: 25%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 4px;
            text-align: center;
        }

        .slider-group {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 20px;
        }

        .slider-group-cmyk {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 20px;
            margin-bottom: 20px;
        }

        .slider-group div {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .slider-group-cmyk div {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .slider-group input[type="range"] {
            width: 70%;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>Color Converter</h1>
        
        <h2 class="palette">Palette</h2>

        <div class="color-picker">
            <input type="color" id="colorPicker" oninput="handleColorPickerChange(this.value)">
        </div>

        <div class="names">
            <label>RGB</label>
        </div>

        <div class="slider-group">
            <div>
                <label for="rgbR">Red</label>
                <input type="text" id="rgbRText" value="255" onchange="updateColorRGB()">
                <input type="range" id="rgbR" min="0" max="255" value="255" oninput="handleRGBChange()">
            </div>

            <div>
                <label for="rgbG">Green</label>
                <input type="text" id="rgbGText" value="255" onchange="updateColorRGB()">
                <input type="range" id="rgbG" min="0" max="255" value="255" oninput="handleRGBChange()">
            </div>

            <div>
                <label for="rgbB">Blue</label>
                <input type="text" id="rgbBText" value="255" onchange="updateColorRGB()">
                <input type="range" id="rgbB" min="0" max="255" value="255" oninput="handleRGBChange()">
            </div>
        </div>

        <div class="names">
            <label>HLS</label>
        </div>

        <div class="slider-group">
            
            <div>
                <label for="hue">Hue</label>
                <input type="text" id="hueText" value="0" onchange="updateColorHLS()">
                <input type="range" id="hue" min="0" max="360" value="0" oninput="handleHLSChange()">
            </div>
            <div>
                <label for="lightness">Lightness</label>
                <input type="text" id="lightnessText" value="50" onchange="updateColorHLS()">
                <input type="range" id="lightness" min="0" max="100" value="50" oninput="handleHLSChange()">
            </div>
            <div>
                <label for="saturation">Saturation</label>
                <input type="text" id="saturationText" value="0" onchange="updateColorHLS()">
                <input type="range" id="saturation" min="0" max="100" value="0" oninput="handleHLSChange()">
            </div>


        </div>

        <div class="names">
            <label>CMYK</label>
        </div>

        <div class="slider-group-cmyk">
            <!-- CMYK -->
            <div>
                <label for="cyan">Cyan</label>
                <input type="text" id="cyanText" value="0" onchange="updateColorCMYK()">
                <input type="range" id="cyan" min="0" max="100" value="0" oninput="handleCMYKChange()">
            </div>

            <div>
                <label for="magenta">Magenta</label>
                <input type="text" id="magentaText" value="0" onchange="updateColorCMYK()">
                <input type="range" id="magenta" min="0" max="100" value="0" oninput="handleCMYKChange()">
            </div>

            <div>
                <label for="yellow">Yellow</label>
                <input type="text" id="yellowText" value="0" onchange="updateColorCMYK()">
                <input type="range" id="yellow" min="0" max="100" value="0" oninput="handleCMYKChange()">
            </div>

            <div>
                <label for="black">Black</label>
                <input type="text" id="blackText" value="0" onchange="updateColorCMYK()">
                <input type="range" id="black" min="0" max="100" value="0" oninput="handleCMYKChange()">
            </div>
        </div>
    </div>

    <script>
        function handleRGBChange() {
            const r = parseInt(document.getElementById('rgbR').value);
            const g = parseInt(document.getElementById('rgbG').value);
            const b = parseInt(document.getElementById('rgbB').value);

            document.getElementById('rgbRText').value = r;
            document.getElementById('rgbGText').value = g;
            document.getElementById('rgbBText').value = b;

            updateColorBox(r, g, b);
            updateHLS(r, g, b);
            updateCMYK(r, g, b);
            updateColorPicker(rgbToHex(r, g, b));
        }

        function handleHLSChange() {
            const h = parseInt(document.getElementById('hue').value);
            const l = parseInt(document.getElementById('lightness').value);
            const s = parseInt(document.getElementById('saturation').value);

            document.getElementById('hueText').value = h;
            document.getElementById('lightnessText').value = l;
            document.getElementById('saturationText').value = s;

            const rgb = hlsToRgb(h, l, s);
            updateColorBox(rgb[0], rgb[1], rgb[2]);
            updateRGB(rgb);
            updateCMYK(rgb[0], rgb[1], rgb[2]);
            updateColorPicker(rgbToHex(rgb[0], rgb[1], rgb[2]))
        }

        function handleCMYKChange() {
            const c = parseInt(document.getElementById('cyan').value);
            const m = parseInt(document.getElementById('magenta').value);
            const y = parseInt(document.getElementById('yellow').value);
            const k = parseInt(document.getElementById('black').value);

            document.getElementById('cyanText').value = c;
            document.getElementById('magentaText').value = m;
            document.getElementById('yellowText').value = y;
            document.getElementById('blackText').value = k;

            const rgb = cmykToRgb(c, m, y, k);
            updateColorBox(rgb[0], rgb[1], rgb[2]);
            updateRGB(rgb);
            updateHLS(rgb[0], rgb[1], rgb[2]);
            updateColorPicker(rgbToHex(rgb[0], rgb[1], rgb[2]));
        }


        function rgbToHex(r, g, b) {
            const toHex = (x) => {
                const hex = parseInt(x).toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            };
            return '#' + toHex(r) + toHex(g) + toHex(b);
        }

        function updateColorFromRGB() {
            const r = document.getElementById('r').value;
            const g = document.getElementById('g').value;
            const b = document.getElementById('b').value;

            const color = rgbToHex(r, g, b);
            document.getElementById('colorPicker').value = color;
            updateColorDisplay(color);
        }

        function updateColorPicker(color) {
            document.getElementById('colorPicker').style.backgroundColor = color;
        }


        function handleColorPickerChange(color) {
            const rgb = hexToRgb(color);
            updateRGB(rgb);
            updateHLS(rgb[0], rgb[1], rgb[2]);
            updateCMYK(rgb[0], rgb[1], rgb[2]);
            updateColorBox(rgb[0], rgb[1], rgb[2]);
            updateColorPicker(rgbToHex(rgb[0], rgb[1], rgb[2]));
        }

        function updateColorBox(r, g, b) {
            document.body.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
        }

        function updateRGB([r, g, b]) {
            document.getElementById('rgbR').value = r;
            document.getElementById('rgbG').value = g;
            document.getElementById('rgbB').value = b;

            document.getElementById('rgbRText').value = r;
            document.getElementById('rgbGText').value = g;
            document.getElementById('rgbBText').value = b;
        }

        function updateHLS(r, g, b) {
            const [h, l, s] = rgbToHls(r, g, b);

            document.getElementById('hue').value = h;
            document.getElementById('lightness').value = l;
            document.getElementById('saturation').value = s;

            document.getElementById('hueText').value = h;
            document.getElementById('lightnessText').value = l;
            document.getElementById('saturationText').value = s;
        }

        function updateCMYK(r, g, b) {
            const [c, m, y, k] = rgbToCmyk(r, g, b);

            document.getElementById('cyan').value = c;
            document.getElementById('magenta').value = m;
            document.getElementById('yellow').value = y;
            document.getElementById('black').value = k;

            document.getElementById('cyanText').value = c;
            document.getElementById('magentaText').value = m;
            document.getElementById('yellowText').value = y;
            document.getElementById('blackText').value = k;
        }

        function rgbToCmyk(r, g, b) {
            let c = 1 - (r / 255);
            let m = 1 - (g / 255);
            let y = 1 - (b / 255);
            let k = Math.min(c, m, y);
            c = (c - k) / (1 - k);
            m = (m - k) / (1 - k);
            y = (y - k) / (1 - k);
            return [Math.round(c * 100), Math.round(m * 100), Math.round(y * 100), Math.round(k * 100)];
        }

        function cmykToRgb(c, m, y, k) {
            c /= 100;
            m /= 100;
            y /= 100;
            k /= 100;
            const r = 255 * (1 - c) * (1 - k);
            const g = 255 * (1 - m) * (1 - k);
            const b = 255 * (1 - y) * (1 - k);
            return [Math.round(r), Math.round(g), Math.round(b)];
        }

        function rgbToHls(r, g, b) {
            r /= 255, g /= 255, b /= 255;
            let max = Math.max(r, g, b), min = Math.min(r, g, b);
            let h, s, l = max;
            let d = max - min;
            s = max === 0 ? 0 : d / max;
            if (max === min) {
                h = 0;
            } else {
                switch (max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                }
                h /= 6;
            }
            l = (max + min) / 2;
            return [Math.round(h * 360), Math.round(l * 100), Math.round(s * 100)];
        }

function hlsToRgb(h, l, s) {
    s /= 100;
    l /= 100;
    const c = (1 - Math.abs(2 * l - 1)) * s;
    const x = c * (1 - Math.abs((h / 60) % 2 - 1));
    const m = l - c / 2;

    let r, g, b;
    if (h < 60) {
        [r, g, b] = [c, x, 0];
    } else if (h < 120) {
        [r, g, b] = [x, c, 0];
    } else if (h < 180) {
        [r, g, b] = [0, c, x];
    } else if (h < 240) {
        [r, g, b] = [0, x, c];
    } else if (h < 300) {
        [r, g, b] = [x, 0, c];
    } else {
        [r, g, b] = [c, 0, x];
    }

    return [
        Math.round((r + m) * 255),
        Math.round((g + m) * 255),
        Math.round((b + m) * 255)
    ];
}

        function hexToRgb(hex) {
            let bigint = parseInt(hex.substring(1), 16);
            let r = (bigint >> 16) & 255;
            let g = (bigint >> 8) & 255;
            let b = bigint & 255;
            return [r, g, b];
        }

        function updateColorRGB() {
            const r = checkInput(document.getElementById("rgbRText").value, 255); 
            const g = checkInput(document.getElementById("rgbGText").value, 255); 
            const b = checkInput(document.getElementById("rgbBText").value, 255);
            updateColorBox(r, g ,b);
            updateRGB([r, g, b]);
            updateHLS(r, g, b);
            updateCMYK(r, g, b);
            updateColorPicker(rgbToHex(r, g, b));
            document.getElementById('rgbR').value = r;
            document.getElementById('rgbG').value = g;
            document.getElementById('rgbB').value = b;
        }

        function updateColorHLS() {
            const h = checkInput(document.getElementById("hueText").value, 360); 
            const l = checkInput(document.getElementById("lightnessText").value, 100); 
            const s = checkInput(document.getElementById("saturationText").value, 100); 
            const [r, g, b] = hlsToRgb(h, l, s);
            updateColorBox(r, g ,b); 
            updateRGB([r, g ,b]);
            updateCMYK(r, g, b);
            updateColorPicker(rgbToHex(r, g, b));
            document.getElementById('hue').value = h;
            document.getElementById('lightness').value = l;
            document.getElementById('saturation').value = s;
            document.getElementById('hueText').value = h;
            document.getElementById('lightnessText').value = l;
            document.getElementById('saturationText').value = s;

         
        }

        function updateColorCMYK() {
            const c = checkInput(document.getElementById("cyanText").value, 100); 
            const m = checkInput(document.getElementById("magentaText").value, 100); 
            const y = checkInput(document.getElementById("yellowText").value, 100); 
            const k = checkInput(document.getElementById("blackText").value, 100); 
            const [r, g, b] = cmykToRgb(c, m, y, k);
            updateColorBox(r, g ,b);
            updateHLS(r, g, b);
            updateRGB([r, g ,b]);
            document.getElementById('cyan').value = c;
            document.getElementById('magenta').value = m;
            document.getElementById('yellow').value = y;
            document.getElementById('black').value = k;
            document.getElementById('cyanText').value = c;
            document.getElementById('magentaText').value = m;
            document.getElementById('yellowText').value = y;
            document.getElementById('blackText').value = k;
            updateColorPicker(rgbToHex(r, g, b));
            document.getElementById('cyan').value = c;
            document.getElementById('magenta').value = m;
            document.getElementById('yellow').value = y;
            document.getElementById('black').value = k;
        }

 function checkInput(num, cat) {
    if (!isNaN(Number(num))) {
        num = Number(num); 
        if (num < 0) {
            alert("Number must be > 0");
            return 0; 
        }
        if (cat == 255 && num > 255) {
            alert("Number must be <= 255");
            return 0; 
        } else if (cat == 100 && num > 100) {
            alert("Number must be <= 100");
            return 0; 
        } else if (cat == 360 && num > 360) {
            alert("Number must be <= 360");
            return 0; 
        }
        return num; 
    } else {
        alert("Input value must be a number");
        return 0; 
    }
}
    </script>
</body>
</html>
